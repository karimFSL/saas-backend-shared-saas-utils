# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

# commande: git-cliff --config cliff.toml --output CHANGELOG.md
[changelog]
header = """
# FK Changelog
You will find all notable changes to this project documented in this file.
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """

{%- if version and not version is containing("-") %} ## ðŸš€ Release {{ version }} - {{ timestamp | date(format="%Y-%m-%d") }} {%- endif -%}
    {% raw %}\n{% endraw %}
{% for commit in commits %}
    {%- set commit_message = commit.message | split(pat="\n") | first | trim -%}
    {%- if commit_message != "" -%}
* {{ commit_message }}
    {% raw %}\n{% endraw %}
    {%- endif -%}
{%- endfor -%}


"""s
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
<!-- generated by git-cliff -->
"""
# An array of regex based postprocessors to modify the changelog.
# Replace the placeholder `<REPO>` with a URL.
postprocessors = []

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = false
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
    { pattern = '^Merge tag.*', replace = "" },
    { pattern = '^doc: Update CHANGELOG.*', replace = "" },
    { pattern = '^Merge branch.*', replace = "" }
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"